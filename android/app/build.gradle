apply plugin: "com.android.application"

import com.android.build.OutputFile
import net.swiftzer.semver.SemVer

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // https://reactnative.dev/docs/performance#enable-the-ram-format
 *   bundleCommand: "ram-bundle",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
    entryFile: "index.js",
    inputExcludes: ["android/**", "ios/**", ".gitsecret/**", "flow-typed/**"],
    // We distribute the QA debug build for testing, so that we get debug logs.
    // This setting bundles the JS into the APK, so you don't need the metro
    // bundler running in order to run the Debug QA build
    bundleInUniversal: true,
    bundleInIntel: true,
    bundleInRelease: true,
    enableHermes: false, // clean and rebuild if changing
    // Disable dev logging in the Universal build (only disabled in release
    // build type by default)
    devDisabledInAppUniversal: true,
    devDisabledInQaUniversal: true,
    devDisabledInIccaUniversal: true,
    devDisabledInAppIntel: true,
    devDisabledInQaIntel: true,
    devDisabledInIccaIntel: true

]

project.ext.vectoricons = [
    iconFontNames: [ 'MaterialIcons.ttf', 'Octicons.ttf', 'MaterialCommunityIcons.ttf', 'FontAwesome.ttf' ]
]

apply from: "../../node_modules/react-native/react.gradle"
apply from: '../../node_modules/react-native-unimodules/gradle.groovy'
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"

// Add bugsnag plugin for source map and symbol uploads
apply plugin: 'com.bugsnag.android.gradle'

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = true

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc-intl:+'

/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and mirrored here.  If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false);

def getenv(key) {
    return System.getenv(key) ?: project.env.get(key)
}

File releaseKeystore = file("mapeo-release-key.keystore")
def myVersionCode = (getenv("ANDROID_VERSION_CODE") ?: 1) as int
def myVersionName = getenv("ANDROID_VERSION_NAME") ?: getenv("npm_package_version") ?: "0.0.0"
println("Version name")
println(myVersionName)

def getDefaultBugsnagReleaseStage(version) {
    // If changing this, also change in src/backend/app.js
    SemVer parsed = SemVer.parse(version)
    def preRelease = parsed.preRelease
    if (preRelease == null) {
        return 'production'
    } else if (preRelease.toLowerCase().startsWith("rc")) {
        return 'rc'
    }
    return 'internal'
}

def paths = [
    new File("app/build/jni/libs")
]

bugsnag {
    sharedObjectPaths = paths
    uploadReactNativeMappings = true // enable upload of React Native source maps
    // Set variant metadata for ICCA variant
    // If changing this, also change in src/backend/app.js
    variantFilter { variant ->
        def name = variant.name.toLowerCase()
        def map = new HashMap()
        if (name.contains("icca")) {
            map.put("variant", "icca")
        } else {
            map.put("variant", "mapeo")
        }
        metadata = map
    }
    // Disable bugsnag source uploading for locally built versions (on CI version code is set to the build number)
    if (myVersionCode == 1) {
        enabled = false
    }
}

String shouldRebuildNativeModules = System.getenv('NODEJS_MOBILE_BUILD_NATIVE_MODULES');

// This is from the nodejs-mobile build.gradle, but it is only set if
// NODEJS_MOBILE_BUILD_NATIVE_MODULES is "1". When we cache the native modules
// build files we set NODEJS_MOBILE_BUILD_NATIVE_MODULES to "0", but we still
// want to include this folder in the build
if ("0".equals(shouldRebuildNativeModules)) {
    // We are not rebuilding native modules, but we still want to include the
    // cached native module build files in the build
    project.android.sourceSets.main.assets.srcDirs+="${rootProject.buildDir}/nodejs-native-assets/"
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    ndkVersion rootProject.ext.ndkVersion

    dexOptions {
        javaMaxHeapSize "4g"
    }

    defaultConfig {
        applicationId "com.mapeo"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode myVersionCode
        versionName myVersionName
        archivesBaseName = "mapeo"

        // Detox integration
        testBuildType System.getProperty('testBuildType', 'debug')  // This will later be used to control the test apk build type
        testInstrumentationRunner 'com.mapeo.DetoxTestAppJUnitRunner'

        // Bugsnag integration
        manifestPlaceholders = [bugsnagReleaseStage: getDefaultBugsnagReleaseStage(myVersionName)]
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            // Fallback to debug signing keystore if release keystore does not exist
            if (releaseKeystore.exists()) {
                storeFile releaseKeystore
                storePassword getenv("MAPEO_KEYSTORE_PASSWORD")
                keyAlias getenv("MAPEO_KEYSTORE_ALIAS")
                keyPassword getenv("MAPEO_PRIVATE_KEY_PASSWORD")
            } else {
                storeFile file('debug.keystore')
                storePassword 'android'
                keyAlias 'androiddebugkey'
                keyPassword 'android'
            }
        }
    }
    flavorDimensions "version"
    productFlavors {
        qa {
            dimension "version"
            applicationIdSuffix ".qa"
        }
        app {
            dimension "version"
        }
        icca {
            dimension "version"
            applicationIdSuffix ".icca"
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            shrinkResources true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
            ndk {
                abiFilters "armeabi-v7a", "arm64-v8a"
            }
        }
        universal {
            initWith release
            // For depedencies, fallback to using this build type name
            matchingFallbacks = ['release']
            ndk {
                abiFilters "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
            }
            // Detox-specific additions to pro-guard
            proguardFile "${rootProject.projectDir}/../node_modules/detox/android/detox/proguard-rules-app.pro"
        }
        // Build type for intel devices (chromebooks and rare phones)
        intel {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
            matchingFallbacks = ['release']
            ndk {
                abiFilters "x86", "x86_64"
            }
        }
        debug {
            // We need to set this to null so that we can override it for variants
            signingConfig signingConfigs.debug
            applicationIdSuffix ".debug"
            ndk {
                abiFilters "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
            }
            manifestPlaceholders = [bugsnagReleaseStage: "development"]
        }
    }

    variantFilter { variant ->
        def names = variant.flavors*.name
        // For QA variants, skip universal build
        if (names.contains("qa") && variant.buildType.name == "universal") {
            setIgnore(true)
        }
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // The special intel (x86) build type needs to have a different
            // version code to the release build type if they are to be
            // published alongside each other on the Play Store
            if (variant.buildType.name == "intel") {
                output.versionCodeOverride = 1048576 + defaultConfig.versionCode
            }
            // For each separate APK per architecture, set a unique version code as described here:
            // https://developer.android.com/studio/build/configure-apk-splits.html
            // Example: versionCode 1 will generate 1001 for armeabi-v7a, 1002 for x86, etc.
            def versionCodes = ["armeabi-v7a":1, "x86":2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }

    packagingOptions {
        // Fix gradle build warnings (NDK does not support mips any more)
        doNotStrip '*/mips/*.so'
        doNotStrip '*/mips64/*.so'
        // Fix for detox
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    //noinspection GradleDynamicVersion
    implementation "com.facebook.react:react-native:+"  // From node_modules

    addUnimodulesDependencies()

    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"
    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.fbjni'
    }
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }
    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
    }

    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
	    releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }

    // Detox
    androidTestImplementation 'com.wix:detox:+'
    androidTestImplementation 'com.linkedin.testbutler:test-butler-library:2.2.1'
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.implementation
    into 'libs'
}


apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
